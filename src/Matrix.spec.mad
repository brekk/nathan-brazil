import type { Maybe } from "Maybe"

import { Left, Right } from "Either"
import { Just, Nothing } from "Maybe"
import { generateFromString } from "Random"
import { assertEquals, test } from "Test"

import {
  DimensionsNotEqual,
  add,
  columns,
  create,
  determinantN1,
  determinantN2,
  getCell,
  isSquare,
  multiMap,
  rows,
  sameDimensions,
  setCell,
  subtract,
  transposeWithDefault,
} from "./Matrix"
import { aim2 } from "@/Aim"



test("create", () => assertEquals(create(3, 2, 1), [[1, 1], [1, 1], [1, 1]]))
test("isSquare", () => assertEquals(isSquare(create(3, 2, 1)), false))
test("rows", () => assertEquals(rows([]), 0))
test("columns", () => assertEquals(columns([[1, 2, 3]]), 3))
test("getCell", () => assertEquals(getCell(0, 0, create(1, 1, 1)), Just(1)))
test("setCell", () => assertEquals(setCell(0, 0, 5, create(2, 2, 1)), [[5, 1], [1, 1]]))
test(
  "sameDimensions",
  () => do {
    a = create(1, 2, 0)
    b = create(2, 2, 0)
    c = create(2, 2, 1)
    _ <- assertEquals(sameDimensions(a, b), false)
    return assertEquals(sameDimensions(b, c), true)
  },
)

test("multiMap", () => assertEquals(multiMap((x) => x * 2, create(1, 3, 2)), create(1, 3, 4)))

test(
  "add",
  () => do {
    _ <- assertEquals(add(create(2, 1, 4), create(2, 2, 5)), Left(DimensionsNotEqual))
    return assertEquals(add(create(2, 2, 4), create(2, 2, 5)), Right(create(2, 2, 9)))
  },
)
test(
  "subtract",
  () => assertEquals(subtract(create(2, 2, 4), create(2, 2, 5)), Right(create(2, 2, -1))),
)

test(
  "transposeWithDefault",
  () => assertEquals(
    transposeWithDefault(-1, setCell(1, 1, 5, create(2, 3, 1))),
    [[1, 1], [1, 5], [1, 1]],
  ),
)

test("determinantN1", () => assertEquals(determinantN1(create(1, 1, 10)), Right(10)))
test("determinantN2", () => assertEquals(determinantN2([[2, 4], [1, 3]]), Right(2)))

import type { Maybe } from "Maybe"
import type { Random } from "Random"

import type { Stochastic } from "@/Matrix"
import type { IndexedHistogram } from "@/Stats"

import Dict from "Dictionary"
import { equals } from "Function"
import List from "List"
import { add } from "Math"
import { Just, Nothing, fromMaybe } from "Maybe"
import String from "String"

import { mark } from "@/List"
import Matrix from "@/Matrix"
import { indexedHistogram } from "@/Stats"



export type MarkovError = NoValuesGiven | ValueSizeNotMatched | InvalidStateValue

export type MarkovChain a = MarkovChain(List a, Stochastic, Integer)

getValues :: MarkovChain a -> List a
export getValues = where {
  MarkovChain(v, _, _) =>
    v
}

getMatrix :: MarkovChain a -> Stochastic
export getMatrix = where {
  MarkovChain(_, m, _) =>
    m
}

getState :: MarkovChain a -> Integer
export getState = where {
  MarkovChain(_, _, i) =>
    i
}

invalidateWithReason :: MarkovChain a -> Maybe MarkovError
export invalidateWithReason = where {
  MarkovChain(v, probs, state) =>
    do {
      totalValues = List.length(v)
      return if (totalValues < 1) {
        Just(NoValuesGiven)
      } else if (Matrix.rows(probs) != totalValues) {
        Just(ValueSizeNotMatched)
      } else if (state > totalValues - 1) {
        Just(InvalidStateValue)
      } else {
        Nothing
      }
    }
}

empty :: {} -> MarkovChain a
export empty = () => MarkovChain([], [], 0)

current :: MarkovChain a -> Maybe a
export current = where {
  MarkovChain(values, _, i) =>
    List.nth(i, values)
}

isTerminal :: MarkovChain a -> Boolean
export isTerminal = where {
  MarkovChain(_, probs, i) =>
    pipe(
      List.nth(i),
      chain(List.nth(i)),
      map(equals(1.0)),
      fromMaybe(false),
    )(probs)
}

next :: Random -> MarkovChain a -> MarkovChain a
export next = (r, mc) => where(mc) {
  MarkovChain(values, probs, i) =>
    pipe(
      Matrix.selectFrom(r, i),
      fromMaybe(i),
      MarkovChain(values, probs),
    )(probs)
}

transform :: Random -> (Integer -> Integer -> Stochastic) -> MarkovChain a -> MarkovChain a
export transform = (r, fn, mc) => where(mc) {
  MarkovChain(values, probs, i) =>
    pipe(
      Matrix.selectFrom(r, i),
      fromMaybe(i),
      (v) => MarkovChain(values, fn(i, v), v),
    )(probs)
}

// update :: List a -> MarkovChain a -> MarkovChain a
// update = (addendum, mc) => where (mc) {
//   MarkovChain(words, probs, state) => 
// }

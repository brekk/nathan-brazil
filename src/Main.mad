import type { MarkovChain } from "@/Markov"
import type { Stochastic } from "@/Matrix"

import Dict from "Dictionary"
import IO from "IO"
import List from "List"
import { Just } from "Maybe"
import { float, generateFromString } from "Random"
import String from "String"

import Markov from "@/Markov"
import Matrix from "@/Matrix"



// import { calculate } from "./NathanBrazil"



main = () => {
  seed = generateFromString("mavra-chang")
  chance = 8
  // a = Matrix.create(3, 0)
  q = 1 / 4
  h = 1 / 6
  s = 1 / 7
  b = [
    [0, q, q, 0, q, 0, q],
    [0, h, h, h, h, h, h],
    [0, h, h, h, h, h, h],
    [0, h, h, h, h, h, h],
    [0, h, h, h, h, h, h],
    [0, h, h, h, h, h, h],
    [s, s, s, s, s, s, s],
  ]
  mc = Markov.MarkovChain(String.split(" ", "if can can no can no can"), b, 0)
  IO.pTrace("nathan brazil", mc)
  List.repeatWith(
    (n) => {
      mc := Markov.next(seed, mc)
      // IO.pTrace(`${show(n)} ->`, show(float(seed)))
      return Markov.current(mc)
    },
    40,
  )
    |> IO.pTrace("mavra!")
}

import type { MarkovChain } from "@/Markov"
import type { Stochastic } from "@/Matrix"

import Dict from "Dictionary"
import IO from "IO"
import List from "List"
import { Just, fromMaybe } from "Maybe"
import { float, generateFromString } from "Random"
import String from "String"

import Markov from "@/Markov"
import Matrix from "@/Matrix"



// import { calculate } from "./NathanBrazil"



main = () => {
  seed = generateFromString("mavra-chang")
  chance = 8
  // a = Matrix.create(3, 0)
  q = 1 / 4
  h = 1 / 6
  s = 1 / 7
  e = 1 / 8
  /*
        she :    [0, 1, 0  , 0, 0, 0, 0  ,   0],
        sells :  [0, 0, 0.5, 0, 0, 0, 0.5,   0],
        sea :    [0, 0, 0, 0.5, 0, 0, 0  , 0.5],
        shells : [0, 0, 0, 0  , 1, 0, 0  ,   0],
        on :     [0, 0, 0,   0, 0, 1, 0  ,   0],
        the :    [0, 0, 0.5, 0, 0, 0, 0.5, 0],
        sea :    [0,0,0,0,0,0,0,1],
        shore :  [1,0,0,0,0,0,0,0]
        */
  b = [
    [0, 1, 0, 0, 0, 0, 0, 0],
    [0, 0, 0.5, 0, 0, 0, 0.5, 0],
    [0, 0, 0, 0.5, 0, 0, 0, 0.5],
    [0, 0, 0, 0, 1, 0, 0, 0],
    [0, 0, 0, 0, 0, 1, 0, 0],
    [0, 0, 0.5, 0, 0, 0, 0.5, 0],
    [0, 0, 0, 0, 0, 0, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 0],
  ]
  mc = Markov.MarkovChain(String.split(" ", "she sells sea shells on the sea shore"), b, 7)
  pipe(
    List.repeatWith(
      (n) => {
        mc := Markov.next(seed, mc)
        return Markov.current(mc)
      },
    ),
    map(fromMaybe("?")),
    String.join(" "),
    IO.pTrace("real tongue twister"),
  )(40)
}

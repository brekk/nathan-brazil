import type { MarkovChain } from "@/Markov"
import type { Stochastic } from "@/Matrix"

import Dict from "Dictionary"
import IO from "IO"
import List from "List"
import { Just, fromMaybe } from "Maybe"
import { float, generateFromString } from "Random"
import String from "String"

import { set } from "@/Dictionary"
import Markov from "@/Markov"
import Matrix from "@/Matrix"
import Stats from "@/Stats"



// import { calculate } from "./NathanBrazil"



main = () => {
  seed = generateFromString("mavra-chang")



  // b = pipe(
  //   Matrix.createSequential,
  //   Matrix.setCell(2, 3, 0.5),
  //   Matrix.setCell(2, 7, 0.5),
  //   Matrix.setCell(6, 3, 0.5),
  //   Matrix.setCell(6, 7, 0.5),
  //   IO.pTrace("raw"),
  // )(8)


  t = 1 / 3
  h = 1 / 2

  /*
    Fuzzy  : [0,t,0,0,0, 0,t,0,0,0, 0,t,0,0,0,0]
    Wuzzy  : [0,0,t,0,0, 0,0,t,0,0, 0,0,t,0,0,0]
    was    : [0,0,0,1,0, 0,0,0,0,0, 0,0,0,0,0,0]
    a      : [0,0,0,0,1, 0,0,0,0,0, 0,0,0,0,0,0]
    bear.  : [t,0,0,0,0, t,0,0,0,0, t,0,0,0,0,0]

    Fuzzy  : [0,t,0,0,0, 0,t,0,0,0, 0,t,0,0,0,0]
    Wuzzy  : [0,0,t,0,0, 0,0,t,0,0, 0,0,t,0,0,0]
    had    : [0,0,0,0,0, 0,0,0,1,0, 0,0,0,0,0,0]
    no     : [0,0,0,0,0, 0,0,0,0,1, 0,0,0,0,0,0]
    hair.  : [0,0,0,0,0, 0,0,0,0,0, 1,0,0,0,0,0]

    Fuzzy  : [0,t,0,0,0, 0,t,0,0,0, 0,t,0,0,0,0]
    Wuzzy  : [0,0,t,0,0, 0,0,t,0,0, 0,0,t,0,0,0]
    wasnâ€™t : [0,0,0,0,0, 0,0,0,0,0, 0,0,0,1,0,0]
    fuzzy, : [0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,1,0]
    was    : [0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0,1]
    he?    : [1,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0,0]
    */
  sheSells = String.split(" ", "she sells sea shells on the sea shore")
  mc = Markov.MarkovChain(sheSells, Markov.consume(sheSells), 7)
  pipe(
    List.repeatWith(
      (n) => {
        mc := Markov.next(seed, mc)
        return Markov.current(mc)
      },
    ),
    map(fromMaybe("?")),
    String.join(" "),
    IO.pTrace("real tongue twister"),
  )(40)
}

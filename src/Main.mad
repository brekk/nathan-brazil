import type { MarkovChain } from "@/Markov"
import type { Stochastic } from "@/Matrix"

import Dict from "Dictionary"
import IO from "IO"
import List from "List"
import { Just } from "Maybe"
import { float, generateFromString } from "Random"
import String from "String"

import Markov from "@/Markov"
import Matrix from "@/Matrix"



// import { calculate } from "./NathanBrazil"



main = () => {
  seed = generateFromString("mavra-chang")
  chance = 8
  a = Matrix.create(7, 0)
  s = 1
  b = pipe(
    Matrix.setCell(0, 1, s),
    Matrix.setCell(1, 2, s),
    Matrix.setCell(2, 3, s),
    Matrix.setCell(3, 4, s),
    Matrix.setCell(4, 5, s),
    Matrix.setCell(5, 6, s),
    Matrix.setCell(6, 0, s),
  )(a)
  mc = Markov.MarkovChain(
    ["always", "better", "continuing", "despite", "eating", "fire", "generally"],
    b,
    0,
  )
  IO.pTrace("nathan brazil", mc)
  List.repeatWith(
    (n) => {
      mc := Markov.next(seed, mc)
      IO.pTrace(`${show(n)} ->`, show(float(seed)))
      return Markov.current(mc)
    },
    10,
  )
    |> IO.pTrace("mavra!")
}

import type { MarkovChain } from "@/Markov"
import type { Stochastic } from "@/Matrix"

import Dict from "Dictionary"
import IO from "IO"
import List from "List"
import { Just, fromMaybe } from "Maybe"
import { float, generateFromString } from "Random"
import String from "String"

import Markov from "@/Markov"
import Matrix from "@/Matrix"



// import { calculate } from "./NathanBrazil"



main = () => {
  seed = generateFromString("mavra-chang")



  b = Matrix.create(0, 7)


  t = 1 / 3
  h = 1 / 2

  /*
          Fuzzy  : [0,t,0,0,0, 0,t,0,0,0, 0,t,0,0,0,0]
          Wuzzy  : [0,0,t,0,0, 0,0,t,0,0, 0,0,t,0,0,0]
          was    : [0,0,0,1,0, 0,0,0,0,0, 0,0,0,0,0,0]
          a      : [0,0,0,0,1, 0,0,0,0,0, 0,0,0,0,0,0]
          bear.  : [t,0,0,0,0, t,0,0,0,0, t,0,0,0,0,0]

          Fuzzy  : [0,t,0,0,0, 0,t,0,0,0, 0,t,0,0,0,0]
          Wuzzy  : [0,0,t,0,0, 0,0,t,0,0, 0,0,t,0,0,0]
          had    : [0,0,0,0,0, 0,0,0,1,0, 0,0,0,0,0,0]
          no     : [0,0,0,0,0, 0,0,0,0,1, 0,0,0,0,0,0]
          hair.  : [0,0,0,0,0, 0,0,0,0,0, 1,0,0,0,0,0]

          Fuzzy  : [0,t,0,0,0, 0,t,0,0,0, 0,t,0,0,0,0]
          Wuzzy  : [0,0,t,0,0, 0,0,t,0,0, 0,0,t,0,0,0]
          wasnâ€™t : [0,0,0,0,0, 0,0,0,0,0, 0,0,0,1,0,0]
          fuzzy, : [0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,1,0]
          was    : [0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0,1]
          he?    : [1,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0,0]
          */
  mc = Markov.MarkovChain(String.split(" ", "she sells sea shells on the sea shore"), b, 7)
  pipe(
    List.repeatWith(
      (n) => {
        mc := Markov.next(seed, mc)
        return Markov.current(mc)
      },
    ),
    map(fromMaybe("?")),
    String.join(" "),
    IO.pTrace("real tongue twister"),
  )(40)
}

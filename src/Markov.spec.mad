import type { MarkovChain, MarkovError } from "@/Markov"
import type { Stochastic } from "@/Matrix"

import List from "List"
import { Just, Nothing, fromMaybe } from "Maybe"
import { generateFromString } from "Random"
import String from "String"
import { assertEquals, test } from "Test"

import {
  InvalidStateValue,
  MarkovChain,
  NoValuesGiven,
  ValueSizeNotMatched,
  current,
  empty,
  getMatrix,
  getState,
  getValues,
  invalidateWithReason,
  isTerminal,
  next,
  transform,
} from "@/Markov"
import Matrix from "@/Matrix"



test(
  "invalidateWithReason",
  () => do {
    _ <- assertEquals(invalidateWithReason(MarkovChain([], [], 0)), Just(NoValuesGiven))

    _ <- assertEquals(
      invalidateWithReason(MarkovChain(["hey", "man"], [[0, 1, 0], [0, 0, 1], [1, 0, 0]], 0)),
      Just(ValueSizeNotMatched),
    )
    _ <- assertEquals(
      invalidateWithReason(MarkovChain(["hey", "man"], [[0, 1], [1, 0]], 3)),
      Just(InvalidStateValue),
    )
    return assertEquals(
      invalidateWithReason(
        MarkovChain(["hey", "there", "man"], [[0, 1, 0], [0, 0, 1], [1, 0, 0]], 0),
      ),
      Nothing,
    )
  },
)

test(
  "isTerminal",
  () => assertEquals(
    isTerminal(MarkovChain(["hey", "there", "man"], [[0, 1, 0], [0, 0, 1], [1, 0, 0]], 0)),
    false,
  ),
)

test(
  "current",
  () => assertEquals(
    current(MarkovChain(["a", "b", "c"], [[0, 1, 0], [0, 0, 1], [1, 0, 0]], 0)),
    Just("a"),
  ),
)

test(
  "next",
  () => do {
    seed = generateFromString("next")
    return assertEquals(
      next(seed, MarkovChain(["oh", "really", "cool"], [[0, 1, 0], [0, 0, 1], [1, 0, 0]], 0)),
      MarkovChain(["oh", "really", "cool"], [[0, 1, 0], [0, 0, 1], [1, 0, 0]], 1),
    )
  },
)

test(
  "transform",
  () => do {
    seed = generateFromString("next")
    return assertEquals(
      transform(
        seed,
        (_, _) => [[1, 0], [0, 1]],
        MarkovChain(["shit", "ass"], [[0, 1], [1, 0]], 0),
      ),
      MarkovChain(["shit", "ass"], [[1, 0], [0, 1]], 1),
    )
  },
)

test(
  "usage",
  () => do {
    seed = generateFromString("mavra-chang")
    a = Matrix.create(7, 0)
    s = 1
    b = pipe(
      Matrix.setCell(0, 1, s),
      Matrix.setCell(1, 2, s),
      Matrix.setCell(2, 3, s),
      Matrix.setCell(3, 0, s),
    )(a)
    mc = MarkovChain(["madlib", "is", "really", "cool"], b, 0)
    matched = List.repeatWith(
      (_) => {
        mc := next(seed, mc)
        return current(mc)
      },
      8,
    )
    return assertEquals(
      map(fromMaybe("?"), matched),
      ["is", "really", "cool", "madlib", "is", "really", "cool", "madlib"],
    )
  },
)

test("empty", () => assertEquals(empty(), MarkovChain([], [], 0)))

test(
  "getValues",
  () => assertEquals(getValues(MarkovChain(String.split("", "abc"), [], 0)), ["a", "b", "c"]),
)

test("getMatrix", () => assertEquals(getMatrix(empty()), []))

test("getState", () => assertEquals(getState(empty()), 0))

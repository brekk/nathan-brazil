import type { Maybe } from "Maybe"

import Dict from "Dictionary"
import { equals } from "Function"
import List from "List"
import { Just, Nothing } from "Maybe"
import String from "String"



/*
 * words :: String
 * refs  :: List String
 */
export type Fragment = Fragment(String, List String)
/*
 * data       :: List String
 * stateSize  :: Integer 
 * startWords :: List Fragment
 * endWords   :: List Fragment
 * corpus     :: Dictionary String Fragment
 */
export type Markov
  = Markov(List String, Integer, List Fragment, List Fragment, Dictionary String Fragment)

fragmentWords :: Fragment -> String
export fragmentWords = where {
  Fragment(s, _) =>
    s
}

fragmentRefs :: Fragment -> List String
export fragmentRefs = where {
  Fragment(_, r) =>
    r
}

fragmentAddRef :: Fragment -> String -> Fragment
fragmentAddRef = (frag, str) => where(frag) {
  Fragment(s, r) =>
    Fragment(s, List.append(str, r))
}

searchFragments :: List Fragment -> String -> Maybe Fragment
export searchFragments = (frags, needle) => List.find(
  pipe(
    fragmentWords,
    equals(needle),
  ),
  frags,
)

fragmentHasRef :: Fragment -> String -> Boolean
export fragmentHasRef = (frag, x) => pipe(
  fragmentRefs,
  List.includes(x),
)(frag)

incorporate :: Integer -> List String -> Markov
incorporate = (size, startWords, data) => map(
  (item) => {
    words = String.split(" ", item)
    start = pipe(
      List.slice(0, size),
      String.join(" "),
    )(words)
    prevStart = searchFragments(startWords, start)
    where(prevStart) {
      Just(frag) =>
        !fragmentHasRef(frag, item) ? fragmentAddRef(frag, item) : frag

      Nothing =>
        List.append(Fragment(start, [item]), startWords)
    }
  },
  data,
)
